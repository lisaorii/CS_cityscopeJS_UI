{"version":3,"sources":["Radar/Radar.js","TreeMap/TreeMap.js","Sunburst/Sunburst.js","App.js","serviceWorker.js","index.js"],"names":["domainRange","DOMAIN","name","domain","comparedData","i","Math","random","generateData","data","AnimatedRadar","state","colorRange","this","className","onValueMouseOver","setState","animation","domains","style","polygons","fillOpacity","strokeWidth","axes","text","opacity","fontWeight","fill","labels","textAnchor","fontSize","margin","left","top","bottom","right","width","height","backgroundColor","stroke","tickValues","Array","map","v","Component","_getRandomData","total","values","push","String","slice","size","color","border","children","TreeMap","hoveredNode","treemapData","useCirclePacking","mode","treeProps","damping","stiffness","onLeafMouseOver","getLabel","x","hideRootNode","React","COLORS","DATA","bigness","clr","tipStyle","display","background","alignItems","padding","boxStyle","buildValue","hoveredCell","radius","truedAngle","angle","angle0","cos","y","sin","SunburstWithTooltips","hoverdName","onValueMouseOut","d","getSize","getColor","padAngle","value","App","Boolean","window","location","hostname","match","require","publish","err","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9f807189.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { CircularGridLines, RadarChart } from \"react-vis\";\nimport \"../../node_modules/react-vis/dist/style.css\";\nimport \"./Radar.css\";\n\nconst domainRange = [0, 1];\nconst DOMAIN = [\n  { name: \"amazing city\", domain: domainRange },\n  { name: \"validated innovation\", domain: domainRange },\n  { name: \"predicted happiness\", domain: domainRange },\n  { name: \"mix-use in heaven\", domain: domainRange },\n  { name: \"cool buildings\", domain: domainRange },\n  { name: \"fun crime levels\", domain: domainRange },\n  { name: \"success urbanism\", domain: domainRange },\n  { name: \"happy agents\", domain: domainRange },\n  { name: \"parking bliss\", domain: domainRange },\n  { name: \"deep swarm chains\", domain: domainRange }\n];\n\nlet comparedData = {};\nfor (let i in DOMAIN) {\n  comparedData[DOMAIN[i].name] = Math.random() * DOMAIN[i].domain[1];\n}\n\nfunction generateData() {\n  let data = {};\n  for (let i in DOMAIN) {\n    data[DOMAIN[i].name] = Math.random() * DOMAIN[i].domain[1];\n  }\n  return [data, comparedData];\n}\n\nexport default class AnimatedRadar extends Component {\n  state = {\n    data: generateData(),\n    colorRange: [\"#fc03ec\", \"#79C7E3\"]\n  };\n\n  render() {\n    const { data, colorRange } = this.state;\n    return (\n      <div className=\"Radar\">\n        <RadarChart\n          onValueMouseOver={() => {\n            this.setState({ data: generateData() });\n          }}\n          animation\n          data={data}\n          domains={DOMAIN}\n          colorRange={colorRange}\n          style={{\n            polygons: {\n              fillOpacity: 0.2,\n              strokeWidth: 2\n            },\n            axes: {\n              text: {\n                opacity: 0,\n                fontWeight: 500,\n                fill: \"white\"\n              },\n              strokeWidth: 0.1\n            },\n            labels: {\n              textAnchor: \"middle\",\n              fontSize: 10,\n              fontWeight: \"100\",\n              fill: \"white\"\n            }\n          }}\n          margin={{\n            left: 100,\n            top: 100,\n            bottom: 100,\n            right: 100\n          }}\n          width={600}\n          height={600}\n        >\n          <CircularGridLines\n            style={{\n              fill: \"white\",\n              fillOpacity: 0.1,\n              backgroundColor: \"#fff\",\n              opacity: 0.5,\n              stroke: \"#333333\"\n            }}\n            tickValues={[...new Array(10)].map((v, i) => i / 10 - 1)}\n          />\n        </RadarChart>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { Treemap } from \"react-vis\";\nimport \"./TreeMap.css\";\n\nfunction _getRandomData(total) {\n  const totalValues = 20;\n  const values = [];\n  for (let i = 0; i < totalValues; i++) {\n    values.push({\n      name: total ? total : String(Math.random()).slice(0, 3),\n      size: Math.random() * 1000,\n      color: Math.random(),\n      style: {\n        border: \"thin solid white\"\n      }\n    });\n  }\n\n  let res = {\n    color: 0,\n    children: values\n  };\n  return res;\n}\n\nexport default class TreeMap extends React.Component {\n  state = {\n    hoveredNode: false,\n    treemapData: _getRandomData(20),\n    useCirclePacking: false,\n    mode: \"circlePack\"\n  };\n\n  render() {\n    const treeProps = {\n      animation: {\n        damping: 15,\n        stiffness: 600\n      },\n      data: this.state.treemapData,\n      onLeafMouseOver: () => {\n        this.setState({ treemapData: _getRandomData() });\n      },\n      height: 300,\n      width: 300,\n      mode: this.state.mode,\n      getLabel: x => x.name,\n      colorRange: [\"#79C7E3\", \"#fc03ec\"],\n      opacity: 0.9,\n      hideRootNode: true\n    };\n    return (\n      <div className=\"TreeMap\">\n        <Treemap {...treeProps} />\n        <h1>Not Radar 1</h1>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { Hint, Sunburst } from \"react-vis\";\nimport \"./Sunburst.css\";\n\nconst COLORS = [\"#79C7E3\", \"#79A7E3\", \"#fc03ec\", \"#7937E3\", \"#a703ec\"];\n\nconst DATA = {\n  children: [\n    {\n      children: [\n        {\n          bigness: 1,\n          children: [],\n          clr: COLORS[1],\n          name: \"energy to love ratio\"\n        },\n        { bigness: 1, clr: COLORS[2], name: \"chart\" }\n      ],\n      clr: COLORS[3]\n    },\n    {\n      bigness: 1,\n      children: [],\n      clr: COLORS[4],\n      name: \"cool\"\n    }\n  ],\n  name: \"wow\"\n};\n\nconst tipStyle = {\n  display: \"flex\",\n  color: \"#fff\",\n  background: \"#000\",\n  alignItems: \"center\",\n  padding: \"10px\"\n};\nconst boxStyle = { height: \"5px\", width: \"5px\" };\n\nfunction buildValue(hoveredCell) {\n  const { radius, angle, angle0 } = hoveredCell;\n  const truedAngle = (angle + angle0) / 2;\n  return {\n    x: radius * Math.cos(truedAngle),\n    y: radius * Math.sin(truedAngle)\n  };\n}\n\nexport default class SunburstWithTooltips extends React.Component {\n  state = {\n    hoveredCell: false,\n    hoverdName: null\n  };\n  render() {\n    const { hoveredCell, hoverdName } = this.state;\n    return (\n      <div className=\"SunburstWithTooltips\">\n        <Sunburst\n          data={DATA}\n          style={{ stroke: \"#fff\" }}\n          onValueMouseOver={v => {\n            this.setState({\n              hoveredCell: v.x && v.y ? v : false,\n              hoverdName: v.name\n            });\n          }}\n          onValueMouseOut={v =>\n            this.setState({ hoveredCell: false, hoverdName: null })\n          }\n          height={200}\n          width={200}\n          margin={{ top: 10, bottom: 10, left: 10, right: 10 }}\n          getLabel={d => d.name}\n          getSize={d => d.bigness}\n          getColor={d => d.clr}\n          padAngle={() => 0.01}\n        >\n          {hoveredCell ? (\n            <Hint value={buildValue(hoveredCell)}>\n              <div style={tipStyle}>\n                <div style={{ ...boxStyle, background: hoveredCell.clr }} />\n                {hoverdName}\n              </div>\n            </Hint>\n          ) : null}\n        </Sunburst>\n        <h1>Not Radar 2</h1>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport Radar from \"./Radar/Radar\";\nimport TreeMap from \"./TreeMap/TreeMap\";\nimport SunburstWithTooltips from \"./Sunburst/Sunburst\";\nimport \"./App.css\";\n\nconst App = () => (\n  <div className=\"rows\">\n    <Radar />\n    <div>\n      <TreeMap />\n      <SunburstWithTooltips />\n    </div>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nvar ghpages = require(\"gh-pages\");\nghpages.publish(\"build\", function(err) {});\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}