{"version":3,"sources":["dataButton.js","Radar/Radar.js","App.js","serviceWorker.js","index.js"],"names":["DataButton","props","buttonContent","onClick","className","domainRange","DOMAIN","name","domain","comparedData","i","Math","random","generateData","data","AnimatedRadar","state","colorRange","this","animation","domains","style","polygons","fillOpacity","strokeWidth","axes","text","opacity","fontWeight","fill","labels","textAnchor","fontSize","margin","left","top","bottom","right","width","height","backgroundColor","stroke","tickValues","Array","map","v","setState","Component","App","Boolean","window","location","hostname","match","require","publish","err","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gTAiBeA,MAdf,SAAoBC,GAAQ,IAClBC,EAA2BD,EAA3BC,cAAeC,EAAYF,EAAZE,QACvB,OACE,4BAAQC,UAAU,kBAAkBD,QAASA,GAC1CD,ICDDG,G,cAAc,CAAC,EAAG,IAClBC,EAAS,CACb,CAAEC,KAAM,eAAgBC,OAAQH,GAChC,CAAEE,KAAM,uBAAwBC,OAAQH,GACxC,CAAEE,KAAM,4BAA6BC,OAAQH,GAC7C,CAAEE,KAAM,oBAAqBC,OAAQH,GACrC,CAAEE,KAAM,iBAAkBC,OAAQH,GAClC,CAAEE,KAAM,mBAAoBC,OAAQH,GACpC,CAAEE,KAAM,iBAAkBC,OAAQH,GAClC,CAAEE,KAAM,eAAgBC,OAAQH,GAChC,CAAEE,KAAM,gBAAiBC,OAAQH,GACjC,CAAEE,KAAM,oBAAqBC,OAAQH,IAGnCI,EAAe,GACnB,IAAK,IAAIC,KAAKJ,EACZG,EAAaH,EAAOI,GAAGH,MAAQI,KAAKC,SAAWN,EAAOI,GAAGF,OAAO,GAGlE,SAASK,IACP,IAAIC,EAAO,GACX,IAAK,IAAIJ,KAAKJ,EACZQ,EAAKR,EAAOI,GAAGH,MAAQI,KAAKC,SAAWN,EAAOI,GAAGF,OAAO,GAE1D,MAAO,CAACM,EAAML,G,IAGKM,E,2MACnBC,MAAQ,CACNF,KAAMD,IACNI,WAAY,CAAC,UAAW,Y,wEAGhB,IAAD,SACsBC,KAAKF,MAA1BF,EADD,EACCA,KAAMG,EADP,EACOA,WACd,OACE,yBAAKb,UAAU,uBACb,kBAAC,IAAD,CACEe,WAAS,EACTL,KAAMA,EACNM,QAASd,EACTW,WAAYA,EACZI,MAAO,CACLC,SAAU,CACRC,YAAa,GACbC,YAAa,GAEfC,KAAM,CACJC,KAAM,CACJC,QAAS,EACTC,WAAY,IACZC,KAAM,SAERL,YAAa,IAEfM,OAAQ,CACNC,WAAY,SACZC,SAAU,GACVJ,WAAY,MACZC,KAAM,UAGVI,OAAQ,CACNC,KAAM,IACNC,IAAK,IACLC,OAAQ,IACRC,MAAO,KAETC,MAAO,IACPC,OAAQ,KAER,kBAAC,IAAD,CACElB,MAAO,CACLQ,KAAM,QACNN,YAAa,GACbiB,gBAAiB,OACjBb,QAAS,GACTc,OAAQ,WAEVC,WAAY,YAAI,IAAIC,MAAM,KAAKC,KAAI,SAACC,EAAGnC,GAAJ,OAAUA,EAAI,GAAK,QAG1D,kBAAC,EAAD,CACEP,QAAS,kBAAM,EAAK2C,SAAS,CAAEhC,KAAMD,OACrCX,cAAe,qB,GAzDkB6C,aCrB5BC,G,OAPH,kBACV,yBAAK5C,UAAU,QACb,kBAAC,EAAD,SCKgB6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbQC,EAAQ,KACdC,QAAQ,SAAS,SAASC,OAElCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.173d9773.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction DataButton(props) {\n  const { buttonContent, onClick } = props;\n  return (\n    <button className=\"showcase-button\" onClick={onClick}>\n      {buttonContent}\n    </button>\n  );\n}\n\nDataButton.propTypes = {\n  buttonContent: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired\n};\n\nexport default DataButton;\n","import React, { Component } from \"react\";\nimport { CircularGridLines, RadarChart } from \"react-vis\";\nimport DataButton from \"../dataButton\";\nimport \"../../node_modules/react-vis/dist/style.css\";\nimport \"./Radar.css\";\n\nconst domainRange = [0, 1];\nconst DOMAIN = [\n  { name: \"amazing city\", domain: domainRange },\n  { name: \"validated innovation\", domain: domainRange },\n  { name: \"predicted urban happiness\", domain: domainRange },\n  { name: \"mix-use in heaven\", domain: domainRange },\n  { name: \"cool buildings\", domain: domainRange },\n  { name: \"fun crime levels\", domain: domainRange },\n  { name: \"success to all\", domain: domainRange },\n  { name: \"happy agents\", domain: domainRange },\n  { name: \"parking bliss\", domain: domainRange },\n  { name: \"deep swarm chains\", domain: domainRange }\n];\n\nlet comparedData = {};\nfor (let i in DOMAIN) {\n  comparedData[DOMAIN[i].name] = Math.random() * DOMAIN[i].domain[1];\n}\n\nfunction generateData() {\n  let data = {};\n  for (let i in DOMAIN) {\n    data[DOMAIN[i].name] = Math.random() * DOMAIN[i].domain[1];\n  }\n  return [data, comparedData];\n}\n\nexport default class AnimatedRadar extends Component {\n  state = {\n    data: generateData(),\n    colorRange: [\"#fc03ec\", \"#79C7E3\"]\n  };\n\n  render() {\n    const { data, colorRange } = this.state;\n    return (\n      <div className=\"centered-and-flexed\">\n        <RadarChart\n          animation\n          data={data}\n          domains={DOMAIN}\n          colorRange={colorRange}\n          style={{\n            polygons: {\n              fillOpacity: 0.2,\n              strokeWidth: 2\n            },\n            axes: {\n              text: {\n                opacity: 0,\n                fontWeight: 500,\n                fill: \"white\"\n              },\n              strokeWidth: 0.1\n            },\n            labels: {\n              textAnchor: \"middle\",\n              fontSize: 10,\n              fontWeight: \"100\",\n              fill: \"white\"\n            }\n          }}\n          margin={{\n            left: 100,\n            top: 100,\n            bottom: 100,\n            right: 100\n          }}\n          width={600}\n          height={600}\n        >\n          <CircularGridLines\n            style={{\n              fill: \"white\",\n              fillOpacity: 0.1,\n              backgroundColor: \"#fff\",\n              opacity: 0.5,\n              stroke: \"#333333\"\n            }}\n            tickValues={[...new Array(10)].map((v, i) => i / 10 - 1)}\n          />\n        </RadarChart>\n        <DataButton\n          onClick={() => this.setState({ data: generateData() })}\n          buttonContent={\"UPDATE DATA\"}\n        />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport Radar from \"./Radar/Radar\";\n// import TreeMap from \"./TreeMap/TreeMap\";\nimport \"./App.css\";\n\nconst App = () => (\n  <div className=\"rows\">\n    <Radar />\n    {/* <TreeMap /> */}\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nvar ghpages = require(\"gh-pages\");\nghpages.publish(\"build\", function(err) {});\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}